version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:6.0
    container_name: skillsync-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: skillsync
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./database/init.js:/docker-entrypoint-initdb.d/init.js:ro
    networks:
      - skillsync-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: skillsync-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass redis123
    networks:
      - skillsync-network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: skillsync-backend
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 5000
      MONGODB_URI: mongodb://admin:password123@mongodb:27017/skillsync?authSource=admin
      REDIS_URL: redis://:redis123@redis:6379
      JWT_SECRET: your-super-secret-jwt-key-here-change-in-production
      JWT_EXPIRE: 7d
      JWT_REFRESH_SECRET: your-refresh-secret-key-here
      FRONTEND_URL: http://localhost:3000
      CLOUDINARY_CLOUD_NAME: your-cloudinary-name
      CLOUDINARY_API_KEY: your-cloudinary-key
      CLOUDINARY_API_SECRET: your-cloudinary-secret
      EMAIL_SERVICE: gmail
      EMAIL_USERNAME: your-email@gmail.com
      EMAIL_PASSWORD: your-app-password
    ports:
      - "5000:5000"
    volumes:
      - ./backend:/app
      - backend_uploads:/app/uploads
      - backend_logs:/app/logs
      - /app/node_modules
    depends_on:
      - mongodb
      - redis
    networks:
      - skillsync-network
  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: skillsync-frontend
    restart: unless-stopped
    environment:
      REACT_APP_API_URL: http://localhost:5000/api
      REACT_APP_ENVIRONMENT: development
      GENERATE_SOURCEMAP: false
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - skillsync-network
    command: npm start

  # AI/ML Models Service
  ai-models:
    build:
      context: ./ai-models
      dockerfile: Dockerfile
    container_name: skillsync-ai-models
    restart: unless-stopped
    environment:
      FLASK_ENV: development
      MODEL_PATH: /app/models
      REDIS_URL: redis://:redis123@redis:6379
    ports:
      - "8000:8000"
    volumes:
      - ./ai-models:/app
      - ai_models_data:/app/models
    depends_on:
      - redis
    networks:
      - skillsync-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: skillsync-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./infrastructure/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
      - ai-models
    networks:
      - skillsync-network

  # Admin Dashboard
  admin-dashboard:
    build:
      context: ./admin-dashboard
      dockerfile: Dockerfile
    container_name: skillsync-admin
    restart: unless-stopped
    environment:
      REACT_APP_API_URL: http://localhost:5000/api
      REACT_APP_ADMIN_PANEL: true
    ports:
      - "3001:3000"
    volumes:
      - ./admin-dashboard:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - skillsync-network

  # Elasticsearch for search functionality
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.9.0
    container_name: skillsync-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - skillsync-network

  # Background Job Queue Worker
  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile.worker
    container_name: skillsync-worker
    restart: unless-stopped
    environment:
      NODE_ENV: development
      MONGODB_URI: mongodb://admin:password123@mongodb:27017/skillsync?authSource=admin
      REDIS_URL: redis://:redis123@redis:6379
      EMAIL_SERVICE: gmail
      EMAIL_USERNAME: your-email@gmail.com
      EMAIL_PASSWORD: your-app-password
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      - mongodb
      - redis
    networks:
      - skillsync-network
    command: npm run worker

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: skillsync-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - skillsync-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: skillsync-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
    ports:
      - "3002:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana-dashboards:/etc/grafana/provisioning/dashboards:ro
    networks:
      - skillsync-network

networks:
  skillsync-network:
    driver: bridge
    name: skillsync-network

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  backend_uploads:
    driver: local
  backend_logs:
    driver: local
  ai_models_data:
    driver: local
  elasticsearch_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local